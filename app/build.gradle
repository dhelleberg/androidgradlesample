apply plugin: 'android'



def buildTime = new Date().format("yyyy-MM-dd'|'HH:mm", TimeZone.getTimeZone("UTC"))
def hostName = java.net.InetAddress.getLocalHost().getHostName()

ext.versionFile = file(project.projectDir.getPath()+'/version.properties')  //here we store our version information


task loadVersion {
    inputs.file versionFile
    project.ext.appVersion = readVersion()
}


android {
    compileSdkVersion 19
    buildToolsVersion "19.0.2"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
        versionCode appVersion.getVersionCode()
        versionName appVersion.getVersionName()
        buildConfigField "String", "BUILD_TIME", "\"$buildTime\""
        buildConfigField "String", "BUILD_HOST", "\"$hostName\""
    }

    signingConfigs {
        release {
            storeFile file("../my-release-key.keystore")
            storePassword "hellonsa"
            keyAlias "release"
            keyPassword "hellonsa"
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            buildConfigField "String", "API_HOST", "\"http://dev.myservice.com\""
        }
        UAT.initWith(buildTypes.debug)
        UAT {
            buildConfigField "String", "API_HOST", "\"https://uat.myservice.com\""
        }
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            buildConfigField "String", "API_HOST", "\"https://api.myservice.com\""
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
}



class AppVersionInformation {
    int minorVersion
    int majorVersion
    int patchVersion

    int versionCode

    String versionName

    void setVersion(int major, int minor, int patch) {
        majorVersion = major
        minorVersion = minor
        patchVersion = patch

        versionCode = majorVersion * 1000 + minorVersion * 100 + patchVersion * 10
    }

    @Override
    String toString() {
        getVersionName()+"-$versionCode"
    }
}


AppVersionInformation readVersion() {
    logger.quiet 'Reading the version file.'
    if(!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream {
        stream ->  versionProps.load(stream)
    }

    AppVersionInformation appVersionInformation = new AppVersionInformation()

    String version = versionProps.version
    String[]versions = version.split("\\.")
    if(versions.length != 3)
        throw new GradleException("version need to have the format: M.m.p")
    appVersionInformation.setVersion(Integer.parseInt(versions[0]),
            Integer.parseInt(versions[1]),
            Integer.parseInt(versions[2]))

    appVersionInformation.versionName = versionProps.version

    logger.quiet("appVersion: "+appVersionInformation)

    return appVersionInformation
}
