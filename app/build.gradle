apply plugin: 'android'


def buildTime = new Date().format("yyyy-MM-dd'|'HH:mm", TimeZone.getTimeZone("UTC"))
def hostName = java.net.InetAddress.getLocalHost().getHostName()
def appName = "jax-demo"

task loadVersion {
    tasks.whenTaskAdded { theTask ->
        if (theTask.name.contains("pre") ) {
            theTask.dependsOn project.tasks.loadVersion
        }
    }
}

loadVersion << {
    project.ext.appVersion = readVersion()
    android.defaultConfig.versionCode appVersion.versionCode
    android.defaultConfig.versionName appVersion.versionName

    //only manipulate the apk name when running on jenkins, as android studio fails to install custom apk
    if(System.getenv("BUILD_NUMBER") != null) {
        android.applicationVariants.all { variant ->
            def apkSuffix = "-${variant.mergedFlavor.versionName}"
            def originalApkFile = variant.outputFile
            def newApkFile = new File(originalApkFile.getParent(), appName + "-" + originalApkFile.name.replace(".apk", "${apkSuffix}.apk"))
            variant.outputFile = newApkFile
        }
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        buildConfigField "String", "BUILD_TIME", "\"$buildTime\""
        buildConfigField "String", "BUILD_HOST", "\"$hostName\""
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    signingConfigs {
        release {
            storeFile file("../my-release-key.keystore")
            storePassword "hellonsa"
            keyAlias "release"
            keyPassword "hellonsa"
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            buildConfigField "String", "API_HOST", "\"http://dev.myservice.com\""
            testCoverageEnabled = true
        }
        UAT.initWith(buildTypes.debug)
        UAT {
            buildConfigField "String", "API_HOST", "\"https://uat.myservice.com\""
        }
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            buildConfigField "String", "API_HOST", "\"https://api.myservice.com\""
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    jacoco {
        version = '0.6.2.201302030002'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    androidTestCompile ('com.jakewharton.espresso:espresso:1.1-r3') {
        'org.hamcrest:hamcrest-core:1.1'
        'org.hamcrest:hamcrest-library:1.1'
        'org.hamcrest:hamcrest-integration:1.1'
    }
}



class AppVersionInformation {
    int minorVersion
    int majorVersion
    int patchVersion

    int versionCode

    String versionName

    void setVersion(int major, int minor, int patch) {
        majorVersion = major
        minorVersion = minor
        patchVersion = patch

        versionCode = majorVersion * 1000 + minorVersion * 100 + patchVersion * 10
    }

    @Override
    String toString() {
        getVersionName()+"-$versionCode"
    }
}


AppVersionInformation readVersion() {
    logger.quiet 'using version: '+rootProject.version

    AppVersionInformation appVersionInformation = new AppVersionInformation()

    appVersionInformation.setVersion(rootProject.version.major,
                                    rootProject.version.minor,
                                    rootProject.version.build)
    appVersionInformation.versionName = rootProject.version

    logger.quiet("appVersion: "+appVersionInformation)
    return appVersionInformation
}

