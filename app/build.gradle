apply plugin: 'android'


def buildTime = new Date().format("yyyy-MM-dd'|'HH:mm", TimeZone.getTimeZone("UTC"))
def hostName = java.net.InetAddress.getLocalHost().getHostName()

def appName = "bosch-demo"
//only manipulate the apk name when running on jenkins, as android studio fails to install custom apk
if(System.getenv("BUILD_NUMBER") != null) {

    android.applicationVariants.all { variant ->
        def apkSuffix = "-${variant.mergedFlavor.versionName}"
        def originalApkFile = variant.outputFile
        def newApkFile = new File(originalApkFile.getParent(), appName + "-" + originalApkFile.name.replace(".apk", "${apkSuffix}.apk"))
        variant.outputFile = newApkFile
    }
}
import org.ajoberstar.grgit.*

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        versionCode readVersion().versionCode
        versionName readVersion().versionName
        minSdkVersion 7
        targetSdkVersion 19
        buildConfigField "String", "BUILD_TIME", "\"$buildTime\""
        buildConfigField "String", "BUILD_HOST", "\"$hostName\""
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    signingConfigs {
        release {
            storeFile file("../my-release-key.keystore")
            storePassword "hellonsa"
            keyAlias "release"
            keyPassword "hellonsa"
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            buildConfigField "String", "API_HOST", "\"http://dev.myservice.com\""
            testCoverageEnabled = true
        }
        UAT.initWith(buildTypes.debug)
        UAT {
            buildConfigField "String", "API_HOST", "\"https://uat.myservice.com\""
        }
        release {
            buildConfigField "String", "API_HOST", "\"https://api.myservice.com\""
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    jacoco {
        version = '0.6.2.201302030002'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:20.0.+'
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    androidTestCompile files('test-libs/espresso-contrib-1.1-bundled.jar')
}



class AppVersionInformation {
    int minorVersion
    int majorVersion
    int patchVersion

    int versionCode

    String versionName

    void setVersion(int major, int minor, int patch) {
        majorVersion = major
        minorVersion = minor
        patchVersion = patch

        versionCode = majorVersion * 1000 + minorVersion * 100 + patchVersion * 10
    }

    @Override
    String toString() {
        getVersionName()+"-$versionCode"
    }
}


AppVersionInformation readVersion() {

    AppVersionInformation appVersionInformation = new AppVersionInformation()

    ext.repo = Grgit.open(rootProject.file('.'))
    def tags =  ext.repo.tag.list()
    for(tag in tags) {
        def tagName = tag.getName()
        String[]versions = tagName.split("\\.")
        if(versions.length == 3)
            appVersionInformation.setVersion(Integer.parseInt(versions[0]),
                    Integer.parseInt(versions[1]),
                    Integer.parseInt(versions[2]))

            appVersionInformation.versionName = tagName
            
            return appVersionInformation
    }

}

